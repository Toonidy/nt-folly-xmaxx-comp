// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodels

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type User struct {
	ID             string         `json:"id"`
	Username       string         `json:"username"`
	DisplayName    string         `json:"displayName"`
	MembershipType MembershipType `json:"membershipType"`
	Status         Status         `json:"status"`
	CreatedAt      time.Time      `json:"createdAt"`
	UpdatedAt      time.Time      `json:"updatedAt"`
}

type MembershipType string

const (
	MembershipTypeBasic MembershipType = "BASIC"
	MembershipTypeGold  MembershipType = "GOLD"
)

var AllMembershipType = []MembershipType{
	MembershipTypeBasic,
	MembershipTypeGold,
}

func (e MembershipType) IsValid() bool {
	switch e {
	case MembershipTypeBasic, MembershipTypeGold:
		return true
	}
	return false
}

func (e MembershipType) String() string {
	return string(e)
}

func (e *MembershipType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MembershipType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MembershipType", str)
	}
	return nil
}

func (e MembershipType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusNew          Status = "NEW"
	StatusActive       Status = "ACTIVE"
	StatusDisqualified Status = "DISQUALIFIED"
)

var AllStatus = []Status{
	StatusNew,
	StatusActive,
	StatusDisqualified,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusNew, StatusActive, StatusDisqualified:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
