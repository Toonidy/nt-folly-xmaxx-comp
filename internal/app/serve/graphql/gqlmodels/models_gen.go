// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodels

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Competition struct {
	ID              string              `json:"id"`
	Status          CompetitionStatus   `json:"status"`
	Multiplier      int                 `json:"multiplier"`
	GrindRewards    []*CompetitionPrize `json:"grindRewards"`
	PointRewards    []*CompetitionPrize `json:"pointRewards"`
	SpeedRewards    []*CompetitionPrize `json:"speedRewards"`
	AccuracyRewards []*CompetitionPrize `json:"accuracyRewards"`
	Leaderboard     []*CompetitionUser  `json:"leaderboard"`
	StartAt         time.Time           `json:"startAt"`
	FinishAt        time.Time           `json:"finishAt"`
}

type CompetitionPrize struct {
	Rank   int `json:"rank"`
	Points int `json:"points"`
}

type CompetitionUser struct {
	ID            string  `json:"id"`
	User          *User   `json:"user"`
	GrindScore    int     `json:"grindScore"`
	GrindRank     int     `json:"grindRank"`
	SpeedScore    float64 `json:"speedScore"`
	SpeedRank     float64 `json:"speedRank"`
	AccuracyScore float64 `json:"accuracyScore"`
	AccuracyRank  float64 `json:"accuracyRank"`
}

type TimeRangeInput struct {
	TimeFrom time.Time `json:"timeFrom"`
	TimeTo   time.Time `json:"timeTo"`
}

type User struct {
	ID             string         `json:"id"`
	Username       string         `json:"username"`
	DisplayName    string         `json:"displayName"`
	MembershipType MembershipType `json:"membershipType"`
	TotalPoints    int            `json:"totalPoints"`
	Status         UserStatus     `json:"status"`
	CreatedAt      time.Time      `json:"createdAt"`
	UpdatedAt      time.Time      `json:"updatedAt"`
}

type CompetitionStatus string

const (
	CompetitionStatusDraft    CompetitionStatus = "DRAFT"
	CompetitionStatusStarted  CompetitionStatus = "STARTED"
	CompetitionStatusFinished CompetitionStatus = "FINISHED"
	CompetitionStatusFailed   CompetitionStatus = "FAILED"
)

var AllCompetitionStatus = []CompetitionStatus{
	CompetitionStatusDraft,
	CompetitionStatusStarted,
	CompetitionStatusFinished,
	CompetitionStatusFailed,
}

func (e CompetitionStatus) IsValid() bool {
	switch e {
	case CompetitionStatusDraft, CompetitionStatusStarted, CompetitionStatusFinished, CompetitionStatusFailed:
		return true
	}
	return false
}

func (e CompetitionStatus) String() string {
	return string(e)
}

func (e *CompetitionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompetitionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompetitionStatus", str)
	}
	return nil
}

func (e CompetitionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MembershipType string

const (
	MembershipTypeBasic MembershipType = "BASIC"
	MembershipTypeGold  MembershipType = "GOLD"
)

var AllMembershipType = []MembershipType{
	MembershipTypeBasic,
	MembershipTypeGold,
}

func (e MembershipType) IsValid() bool {
	switch e {
	case MembershipTypeBasic, MembershipTypeGold:
		return true
	}
	return false
}

func (e MembershipType) String() string {
	return string(e)
}

func (e *MembershipType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MembershipType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MembershipType", str)
	}
	return nil
}

func (e MembershipType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusNew          UserStatus = "NEW"
	UserStatusActive       UserStatus = "ACTIVE"
	UserStatusDisqualified UserStatus = "DISQUALIFIED"
)

var AllUserStatus = []UserStatus{
	UserStatusNew,
	UserStatusActive,
	UserStatusDisqualified,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusNew, UserStatusActive, UserStatusDisqualified:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
